import getpass
import math
import ntpath
import os
import re
import sys
import time
from pathlib import Path
from subprocess import Popen, PIPE, call
from threading import Thread

import PySimpleGUIQt as Sg
import pandas as pd
from win32com.client import Dispatch

csv = './data'
user_name = getpass.getuser()
new_name = Path(os.path.basename(sys.argv[0])).resolve().stem
f_line = 'scheme' + ',' + 'low priority' + ',' + 'high priority' + ',' + 'taskkill' + '\n'
if not os.path.isfile(csv) or len(open(csv, 'r').readlines()) < 3:
    open(csv, "w+").write(f_line + ',,,\n,,,\n,,,\n')
path = r'C:\Users\%s\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\%s.lnk' % (user_name, new_name)
shell = Dispatch('WScript.Shell')
shortcut = shell.CreateShortCut(path)
shortcut.Targetpath = r"%s\%s" % (os.getcwd(), os.path.basename(sys.argv[0]))
shortcut.WorkingDirectory = os.getcwd()
shortcut.save()

img_data = b''
high = b'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'
mid = b''
low = b''

ax = ''
bx = ''
cx = ''
n_array = []
h_p_r = pd.read_csv(csv, usecols=['high priority']).T.values.tolist()[0]
pro_array_hp = [z for z in h_p_r if not pd.isnull(z)]
l_p_r = pd.read_csv(csv, usecols=['low priority']).T.values.tolist()[0]
pro_array_b = [z for z in l_p_r if not pd.isnull(z)]
cfg = pd.read_csv(csv, usecols=['scheme'], na_filter=False).T.values.tolist()[0][:3]
task_r = pd.read_csv(csv, usecols=['taskkill']).T.values.tolist()[0]
tasks = [z for z in task_r if not pd.isnull(z)]
if len(cfg) < 3:
    for i in range(3):
        cfg.append("")
default = cfg[0] if cfg[0] != '' else 'None'
first = cfg[1] if cfg[1] != '' else 'None'
second = cfg[2] if cfg[2] != '' else 'None'


def multiple_replace(string, rep_dict):
    pat = re.compile("|".join([re.escape(str(k)) for k in sorted(rep_dict, key=len, reverse=True)]), flags=re.DOTALL)
    return pat.sub(lambda x: rep_dict[x.group(0)], string)


def save_csv(g, h, m, n):
    f_array = []

    def try_except(a, b):
        try:
            return a[b]
        except IndexError:
            return ''

    b_array = [len(g), len(h), len(m), len(n)]
    for xe in range(max(b_array)):
        cfgs = try_except(g, xe)
        f_stage = try_except(h, xe)
        s_stage = try_except(m, xe)
        t_list = try_except(n, xe)
        f_array.append(cfgs + ',' + f_stage + ',' + s_stage + ',' + t_list + '\n')
        open(csv, 'w+').write(f_line + ''.join(f_array))


s_call = Popen('powercfg /list', shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE).communicate()[0].decode("utf-8")
replacing = multiple_replace(s_call, {'Power Scheme GUID:': 'powercfg /setactive', ')': '', ' *': '', '  (': '+'})
all_scheme = '+'.join(replacing.split('\r\n')[3:-1]).split('+')
for_default = ['']
for_d = [all_scheme[(i * 2) + 1] for i in range(math.floor(len(all_scheme) / 2))]
for_default.extend(for_d)
for i in range(len(all_scheme)):
    if all_scheme[i] == cfg[0]:
        default_x = all_scheme[i - 1]
    if all_scheme[i] == cfg[1]:
        secondary = all_scheme[i - 1]
    if all_scheme[i] == cfg[2]:
        game = all_scheme[i - 1]


def main():
    global ax
    global bx
    global cx
    global cfg
    pro_b = []
    t_look = []
    pro_hp = []
    o_look = []
    active_scheme0 = ''
    global n_array
    global default_x
    global secondary
    global game
    switch = True
    switch_x = True
    n_array.extend(pro_array_hp)
    n_array.extend(pro_array_b)
    while True:
        time.sleep(1)
        if not any(e in pro_array_hp for e in pro_array_b):
            t_look.clear()
            active_scheme1 = str(Popen('powercfg /GetActiveScheme', shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE
                                       ).communicate()[0].decode("utf-8")).replace(')', '').split('(')[1]
            processes = str(Popen('tasklist', shell=True, stdin=PIPE, stderr=PIPE, stdout=PIPE
                                  ).communicate()[0].decode()).lower()
            for process in n_array:
                t_look.append(process in processes)
            if t_look != o_look or active_scheme1 != active_scheme0:
                o_look.clear()
                o_look.extend(t_look)
                switch = True
                pro_hp.clear()
                pro_b.clear()
                for process in pro_array_hp:
                    pro_hp.append(process in processes)
                for process in pro_array_b:
                    pro_b.append(process in processes)

                for j in range(len(all_scheme)):
                    if all_scheme[j] == cfg[0]:
                        default_x = all_scheme[j - 1]
                    if all_scheme[j] == cfg[1]:
                        secondary = all_scheme[j - 1]
                    if all_scheme[j] == cfg[2]:
                        game = all_scheme[j - 1]
                active_scheme0 = str(Popen('powercfg /GetActiveScheme', shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE
                                           ).communicate()[0].decode("utf-8")).replace(')', '').split('(')[1]

                if cfg[2] not in active_scheme0:
                    if True in pro_hp:
                        for x in tasks:
                            if x in processes:
                                call('taskkill.exe /F /IM ' + x, shell=True)
                        Popen(game, shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE)
                        switch_x = True

                if cfg[1] not in active_scheme0:
                    if True in pro_b and True not in pro_hp:
                        Popen(secondary, shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE)
                        switch_x = True

                if cfg[0] not in active_scheme0:
                    if True not in pro_hp and True not in pro_b:
                        Popen(default_x, shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE)
                        switch_x = True

                if switch_x:
                    time.sleep(1)
                    a_scheme1 = str(Popen('powercfg /GetActiveScheme', shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE
                                          ).communicate()[0].decode("utf-8")).replace(')', '').split('(')[1]
                    switch_x = False
                    if 'performance' in a_scheme1.lower():
                        tray.ShowMessage('Active Scheme!', a_scheme1, data_base64=high)
                        tray.Update(data_base64=high)
                    if 'balanced' in a_scheme1.lower():
                        tray.ShowMessage('Active Scheme!', a_scheme1, data_base64=mid)
                        tray.Update(data_base64=mid)
                    if 'saver' in a_scheme1.lower():
                        tray.ShowMessage('Active Scheme!', a_scheme1, data_base64=low)
                        tray.Update(data_base64=low)
        else:
            if switch:
                tray.ShowMessage('Duplicates!', 'Remove common apps!')
                switch = False


menu_def = ['', ['Edit', '---', '!' + default, '!' + first, '!' + second, 'Restart', 'Exit']]
tray = Sg.SystemTray(menu=menu_def, data_base64=img_data)

tray.ShowMessage('Startup', 'Starting process.', data_base64=img_data)
main_thread = Thread(target=main)
main_thread.start()
while True:
    menu_item = tray.Read()
    if menu_item == 'Exit':
        import os

        call('taskkill.exe /F /IM ' + str(os.getpid()), shell=True)
        break

    elif menu_item == 'Restart':
        sys.stdout.flush()
        self_name = os.path.basename(__file__)
        os.execl(sys.executable, self_name, *sys.argv[1:])

    elif menu_item in ('Edit', Sg.EVENT_SYSTEM_TRAY_ICON_DOUBLE_CLICKED):
        array0 = []
        array1 = []

        Sg.theme('BlueMono')
        combo = [
            [Sg.Text('Default profile:', size=(11, 1)),
             Sg.Combo(for_default, default, size=(20, 0.7), enable_events=True, key='Default')]]

        combo0 = [[Sg.Text(' Low priority:')],
                  [Sg.Combo(for_default, first, size=(20, 0.7), enable_events=True, key='First')],
                  [Sg.Listbox(values=pro_array_b, enable_events=True, size=(20, 3),
                              select_mode=Sg.LISTBOX_SELECT_MODE_SINGLE, visible=True, key="-APP-LIST0-")],
                  [Sg.Input(size=(10, 0.7), enable_events=True, key='-ADD-APP0-', visible=False),
                   Sg.FileBrowse(size=(20, 0.7))]]

        combo1 = [[Sg.Text(' High priority:')],
                  [Sg.Combo(for_default, second, size=(20, 0.7), enable_events=True, key='Second')],
                  [Sg.Listbox(values=pro_array_hp, enable_events=True, size=(20, 3),
                              select_mode=Sg.LISTBOX_SELECT_MODE_SINGLE, visible=True, key="-APP-LIST1-")],
                  [Sg.Input(size=(10, 0.7), enable_events=True, key='-ADD-APP1-', visible=False),
                   Sg.FileBrowse(size=(20, 0.7))]]

        combo2 = [[Sg.Text('                       Apps to kill on high priority:', font='any 12')],
                  [Sg.Listbox(values=tasks, enable_events=True, size=(42.9, 3),
                              select_mode=Sg.LISTBOX_SELECT_MODE_SINGLE, visible=True, key="-APP-LIST2-")],
                  [Sg.Input(size=(10, 1), enable_events=True, key='-ADD-APP2-', visible=False),
                   Sg.FileBrowse(size=(42.9, 1))]]

        layout = [[Sg.Column(combo)],
                  [Sg.Column(combo0), Sg.Column(combo1)],
                  [Sg.Text(' ', size=(0.7, 1)), Sg.Button("REMOVE", disabled=True, size=(42.9, 1))],
                  [Sg.Column(combo2)]]

        window = Sg.Window('Power Settings', layout, icon=img_data, resizable=False, finalize=True)

        while True:
            event, values, = window.Read()
            if event is None:
                break

            elif event == "-ADD-APP0-":
                try:
                    App_name = ntpath.basename(values['-ADD-APP0-'])
                    if App_name not in pro_array_b:
                        pro_array_b.append(App_name)
                        n_array.append(App_name)
                        pro_array_b = list(filter(None, pro_array_b))
                        n_array = list(filter(None, n_array))
                        save_csv(cfg, pro_array_b, pro_array_hp, tasks)
                        window["-APP-LIST0-"].Update(pro_array_b)
                    tray.ShowMessage('Add app', 'App added to the list.', data_base64=img_data)
                except FileNotFoundError:
                    pass

            elif event == "-ADD-APP1-":
                try:
                    App_name = ntpath.basename(values['-ADD-APP1-'])
                    if App_name not in pro_array_hp:
                        pro_array_hp.append(App_name)
                        n_array.append(App_name)
                        pro_array_hp = list(filter(None, pro_array_hp))
                        n_array = list(filter(None, n_array))
                        save_csv(cfg, pro_array_b, pro_array_hp, tasks)
                        window["-APP-LIST1-"].Update(pro_array_hp)
                    tray.ShowMessage('Add app', 'App added to the list.', data_base64=img_data)
                except FileNotFoundError:
                    pass

            elif event == "-ADD-APP2-":
                try:
                    App_name = ntpath.basename(values['-ADD-APP2-'])
                    if App_name not in pro_array_hp:
                        tasks.append(App_name)
                        tasks = list(filter(None, tasks))
                        save_csv(cfg, pro_array_b, pro_array_hp, tasks)
                        window["-APP-LIST2-"].Update(tasks)
                    tray.ShowMessage('Add app', 'App added to the list.', data_base64=img_data)
                except FileNotFoundError:
                    pass

            elif event in ("-APP-LIST0-", "-APP-LIST1-", "-APP-LIST2-"):
                window["REMOVE"].Update(disabled=False)

            elif event == "REMOVE":
                if values["-APP-LIST0-"]:
                    pro_array_b.remove(values["-APP-LIST0-"][0].strip())
                    pro_array_b = list(filter(None, pro_array_b))
                    window["-APP-LIST0-"].Update(pro_array_b)
                    save_csv(cfg, pro_array_b, pro_array_hp, tasks)
                elif values["-APP-LIST1-"]:
                    pro_array_hp.remove(values["-APP-LIST1-"][0].strip())
                    pro_array_hp = list(filter(None, pro_array_hp))
                    window["-APP-LIST1-"].Update(pro_array_hp)
                    save_csv(cfg, pro_array_b, pro_array_hp, tasks)
                elif values["-APP-LIST2-"]:
                    tasks.remove(values["-APP-LIST2-"][0].strip())
                    tasks = list(filter(None, tasks))
                    window["-APP-LIST2-"].Update(tasks)
                    save_csv(cfg, pro_array_b, pro_array_hp, tasks)
                window["REMOVE"].Update(disabled=True)
                tray.ShowMessage('Removed', 'App deleted from the list.', data_base64=img_data)

            elif event == 'Default':
                default = values['Default']
                cfg[0] = values['Default']
                save_csv(cfg, pro_array_b, pro_array_hp, tasks)
                tray.ShowMessage('Power Plan', event + ': ' + default if default != '' else 'None', data_base64=img_data)

            elif event == 'First':
                first = values['First']
                cfg[1] = values['First']
                save_csv(cfg, pro_array_b, pro_array_hp, tasks)
                tray.ShowMessage('Power Plan', event + ': ' + first if first != '' else 'None', data_base64=img_data)

            elif event == 'Second':
                second = values['Second']
                cfg[2] = values['Second']
                save_csv(cfg, pro_array_b, pro_array_hp, tasks)
                tray.ShowMessage('Power Plan', event + ': ' + second if second != '' else 'None', data_base64=img_data)
            tray.update(['', ['Edit', '---', '!' + default, '!' + first, '!' + second, 'Exit']])
        window.Close()
tray.Close()
